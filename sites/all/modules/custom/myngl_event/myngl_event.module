<?php

function myngl_event_menu() {
  $items['myngl-event/%/lobby'] = array(
    'title' => 'MyNGL Lobby',
    'page callback' => 'myngl_event_lobby',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/social-area'] = array(
    'title' => 'MyNGL Lounge',
    'page callback' => 'myngl_event_social_area',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  
  $items['myngl-event/%/exit'] = array(
    'title' => 'MyNGL Exit',
    'page callback' => 'myngl_event_exit',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/ajax/message/%/%'] = array(
    'title' => 'MyNGL Lobby',
    'page callback' => 'myngl_event_alerts_ajax_message',
    'page arguments' => array(1,4,5),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/ajax/theater-message'] = array(
    'title' => 'MyNGL Theater',
    'page callback' => 'myngl_event_theater_ajax_message',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/invitee-info-update'] = array(
    'title' => 'MyNGL Invitee Info Update',
    'page callback' => 'myngl_event_invitee_info_update',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );


  $items['myngl-event/%/ajax/question'] = array(
    'title' => 'MyNGL Lobby',
    'page callback' => 'myngl_event_social_area_ajax_question',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/ajax/pov_message'] = array(
    'title' => 'MyNGL Lobby',
    'page callback' => 'myngl_event_social_area_ajax_pov_message',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/ajax/post-pov-message'] = array(
    'title' => 'MyNGL Lobby',
    'page callback' => 'myngl_event_social_area_ajax_post_pov_message',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );
  
  $items['myngl-event/theater/question/%'] = array(
    'title' => 'MyNGL Lobby',
    'page callback' => 'myngl_event_theater_question_submit',
    'page arguments' => array(3,4),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/%/%'] = array(
  'title' => 'MyNGL Event Participant Status',
  'page callback' => 'myngl_event_participant_status',
  'page arguments' => array(1, 2, 3),
  'access callback' => TRUE,
  );

  $items['myngl-event/%/update-users-in-lounge'] = array(
    'title' => 'Update users in lounge',
    'page callback' => 'myngl_event_update_users_in_lounge',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  $items['myngl-event/%/lounge-redirect-to-theater'] = array(
    'title' => 'Redirect Participants From Lounge To Theater',
    'page callback' => 'myngl_event_lounge_redirect_to_theater',
    'page arguments' => array(1),
    'access callback' => TRUE,
  );

  return $items;
}


function myngl_event_theme() {
  $items['myngl_event_lobby'] =  array(
                          'template' => 'myngl-event-lobby',
                          'variables' => array ('myngl' => NULL, 'brand' => NULL),
                        );

  $items['myngl_event_exit'] =  array(
                          'template' => 'myngl-event-exit',
                          'variables' => array ('myngl' => NULL, 'brand' => NULL, 'points' => NULL),
                        );

  $items['myngl_event_social_area'] =  array(
                          'template' => 'myngl-event-social-area',
                          'variables' => array ('myngl' => NULL, 'brand' => NULL, 'invitees' => NULL, 'ucg' => NULL, 'total_points' => NULL, 'pre_questions' =>NULL,),
                        );

  return $items;
}

function myngl_event_exit($nid) {
  global $user;

  $myngl = node_load($nid);
  $brand = node_load($myngl->field_myngl_brand['und'][0]['nid']);

  $total_points = db_query('SELECT total_points FROM {myngl_rewards_total} WHERE
                        myngl_id = :myngl_id AND
                        user_id = :user_id',
                        array(
                          ':myngl_id' => $nid,
                          ':user_id' => $user->uid,
                        )
                      )->fetchField();

  return theme('myngl_event_exit', array('myngl' => $myngl, 'brand' => $brand, 'points' => $total_points));
}

function myngl_event_lobby($nid){
  global $user;
  drupal_add_js(path_to_theme().'/js/lobby.js');
  drupal_add_js("https://www.youtube.com/iframe_api");
  
  drupal_add_js(array('myngl_id' => $nid), 'setting');
  drupal_add_js(array('user_id' => $user->uid), 'setting');
  //drupal_add_js("http://survey.g.doubleclick.net/async_survey?site=ckqirtkixakm2hybneeuj6j7uq");
  $myngl = node_load($nid);
  $brand = node_load($myngl->field_myngl_brand['und'][0]['nid']);

  return theme('myngl_event_lobby', array('myngl' => $myngl, 'brand' => $brand));
}


function myngl_event_social_area($nid) {
  global $user;

  drupal_add_library('system', 'ui.draggable');
  drupal_add_js(path_to_theme().'/js/social-area.js');
  drupal_add_js(path_to_theme().'/js/chat.js');
  drupal_add_js(path_to_theme().'/js/pov.js');
  drupal_add_js(array('myngl_id' => $nid), 'setting');
  drupal_add_js(array('user_id' => $user->uid), 'setting');

  $myngl = node_load($nid);


  //print "<pre>";
  //print ;
  drupal_add_js(array('lounge_background'=>file_create_url($myngl->field_lounge_background['und'][0]['uri'])),'setting');

  drupal_add_js(array('show_pov_and_ugc_borders'=>$myngl->field_show_pov_and_ugc_borders['und'][0]['value']),'setting');


  drupal_add_js(array('ugc_height'=>$myngl->field_ugc_height['und'][0]['value']),'setting');
  drupal_add_js(array('ugc_width'=>$myngl->field_ugc_width['und'][0]['value']),'setting');
  drupal_add_js(array('ugc_top'=>$myngl->field_ugc_top['und'][0]['value']),'setting');
  drupal_add_js(array('ugc_left'=>$myngl->field_ugc_left['und'][0]['value']),'setting');

  drupal_add_js(array('pov_height'=>$myngl->field_pov_height['und'][0]['value']),'setting');
  drupal_add_js(array('pov_width'=>$myngl->field_pov_width['und'][0]['value']),'setting');
  drupal_add_js(array('pov_top'=>$myngl->field_pov_top['und'][0]['value']),'setting');
  drupal_add_js(array('pov_left'=>$myngl->field_pov_left['und'][0]['value']),'setting');
  drupal_add_js(array('developer_mode'=>$myngl->field_show_pov_and_ugc_borders['und'][0]['value']), 'setting');
  drupal_add_js('http://www.youtube.com/player_api');
  //print_r($myngl);
  //exit;
  $brand = node_load($myngl->field_myngl_brand['und'][0]['nid']);

  $brand_reps = $myngl->field_brand_rep2['und'];


  $brand_reps_uids = array();
  foreach($brand_reps as $row){
    $brand_reps_uids[] = $row['uid'];
  }


  $invitees = array();
  $ucg = array();


  foreach ($myngl->field_myngl_invitees['und'] as $x => $i) {
    $ic = array_shift(entity_load('field_collection_item', array($i['value'])));

    $u = user_load($ic->field_invitee_user_account['und'][0]['uid']);
    $p = profile2_load_by_user($u->uid, 'profile');

    $fb = false;
    $room = false;

    if (isset($p->field_picture['und'][0]['uri'])) {
      $pic = theme_image_style(array('style_name' => 'user_profile_circle_image', 'path' => $p->field_picture['und'][0]['uri'], 'attributes' => array('class' => 'myngl-event-profile-pic'), 'height' => null, 'width' => null));
    } else {
      $pic = "<img src='/sites/default/files/styles/user_profile_circle_image/public/default_images/default-user-profile.png' class='myngl-event-profile-pic' />";
    }

    $answers = unserialize($ic->field_pre_question_answers['und'][0]['value']);

    $invitees[] = array (
                  'uid' => $u->uid,
                  'name' => $u->field_first_name['und'][0]['safe_value'] . ' ' . $u->field_last_name['und'][0]['safe_value'],
                  'pic' => $pic,
                  'fb' => $fb,
                  'room' => $room,
                  'tagline' =>  $ic->field_myngl_tagline['und'][0]['value'],
                  'about_me' => $p->field_about['und'][0]['value'],
                  'brand_rep' => (in_array($u->uid, $brand_reps_uids))?1:0,
                  'city' => $p->field_city['und'][0]['value']

                );

    //for ($x=1;$x<=3;$x+=1) {
      if (isset($ic->field_image_upload['und'])) {
        foreach ($ic->field_image_upload['und'] as $image) {
          $approve =db_query("SELECT weight FROM myngl_invitee_ugc_approve WHERE
                        fid = :fid AND myngl_id =:myngl_id", array(":fid" => $image['fid'], ":myngl_id"=>$nid,));
          if ($approve->rowCount()){
            //print_r($approve);
            //$weight = $approve->fetchField();
            //print $weight. "<br/>";

            $ucg[$approve->fetchField()] = array(
              'thumb' => theme_image_style(array('style_name' => 'user_generated_content_thumbs', 'path' => $image['uri'], 'attributes' => array('class' => 'ugc-pic'), 'height' => null, 'width' => null)),
              'content' => theme_image_style(array('style_name' => 'user_generated_content_images', 'path' => $image['uri'], 'attributes' => array('class' => 'ugc-pic'), 'height' => null, 'width' => null)),
              'user' => $u->field_first_name['und'][0]['safe_value'] . ' ' . $u->field_last_name['und'][0]['safe_value'],
              'path' => file_create_url($image['uri']),
            );
          }
        }
      }

      if (isset($ic->field_video_upload['und'])) {
        foreach ($ic->field_video_upload['und'] as $video) {
          $approve =db_query("SELECT weight FROM myngl_invitee_ugc_approve WHERE
                        fid = :vid AND myngl_id =:myngl_id", array(":vid" => $video['video_id'], ":myngl_id"=>$nid,));
          if ($approve->rowCount()){
            $ucg[$approve->fetchField()] = array (
              'thumb' => theme('youtube_thumbnail', array('image_style' => 'user_generated_content_videos', 'video_id' => $video['video_id'])),
              'content' => theme('youtube_video', array('video_id' => $video['video_id'], 'size' => 'custom', 'height' => '400px', 'width' => '600px')),
              'user' => $u->field_first_name['und'][0]['safe_value'] . ' ' . $u->field_last_name['und'][0]['safe_value'],
            );
          }
        }
      }
      ksort($ucg);
    //}
  }

  $pre_questions = array();
  foreach ($myngl->field_pre_myngl_questions['und'] as $x => $i) {

    $j = array_shift(entity_load('field_collection_item', array($i['value'])));

    //Skip non-multichoice questions;
    if (!isset($j->field_answer['und'])) continue;
    if ($j->field_use_as_other_filter['und'][0]['value']==0) continue;

    $question = array(
      'item_id' => $j->item_id,
      'question' => $j->field_question['und'][0]['value'],
      'answers' =>$j->field_answer['und'],
    );

    $pre_questions[] = $question;

  }

  return theme('myngl_event_social_area', array(
                                                'myngl' => $myngl,
                                                'brand' => $brand,
                                                'invitees' => $invitees,
                                                'ucg' => $ucg,
                                                'total_points' =>myngl_rewards_total_points($user->uid, $nid),
                                                'pre_questions' =>$pre_questions,
                                                )
               );
}

function myngl_event_alerts_ajax_message($nid, $time_passed, $page) {
  // $age: 0 = social-area, 1 = theater, 2 = playroom
  $page = intval($page);
  // Convert ms to s;
  $time_passed = $time_passed / 1000;


  $alert_collection_eids = db_query("SELECT field_myngl_alerts_value
                                    FROM field_data_field_myngl_alerts WHERE
                                    entity_id =:eid", array(":eid"=> $nid));

  if ($alert_collection_eids->rowCount()==0){
    $message['message'] = "";
    drupal_json_output($message);
  }

  $eids = array();
  foreach ($alert_collection_eids as $eid){
    $eids[] = $eid->field_myngl_alerts_value;
  }
  $ents =entity_load('field_collection_item', array($eids));
  $msgs = array();
  $keys = array();
  foreach($ents as $entity){
    if($entity->field_page['und'][0]['value'] == $page){
      $keys[] = $entity->field_time['und'][0]['value'];
      $msgs[] = array('time' =>$entity->field_time['und'][0]['value'],
                    'message' => $entity->field_message['und'][0]['safe_value'],
                    'duration' => $entity->field_duration['und'][0]['value']);
    }
  }

  array_multisort($keys, $msgs);

  $i = 0;
  $msg_set = FALSE;
  $msg = NULL;
  while($msg_set == FALSE){
    if ($keys[$i]>$time_passed){ // beginning of the array
      $msg_set = TRUE;
    }
    else if (!isset($keys[$i+1])){ // end of the array
      $msg = $msgs[$i];
      $msg_set = TRUE;
    }
    else if ($keys[$i]< $time_passed && $keys[$i+1] > $time_passed){
      $msg = $msgs[$i];
      $msg_set = TRUE;
    }
    else {
      $i++;
    }
  }
  if ($msg != NULL){
    $message['message'] = ($msg['time'] + $msg['duration'] < $time_passed)?'':$msg['message'];
  }
  //$message['message'] = db_query('SELECT field_myngl_message_value FROM {field_data_field_myngl_message} WHERE entity_id = :eid', array(':eid' => $nid))->fetchField();
  drupal_json_output($message);
}

function myngl_event_theater_ajax_message($nid) {
  $message['message'] = db_query('SELECT field_theater_message_value FROM {field_data_field_theater_message} WHERE entity_id = :eid', array(':eid' => $nid))->fetchField();

  //$message['message']= $nid;
  drupal_json_output($message);
}

function myngl_event_social_area_ajax_post_pov_message($nid) {
  $node = node_load($nid);

  $node->field_pov_messages['und'][] = array('value' => $_POST['pov_message']);

  node_save($node);
  

}

function myngl_event_social_area_ajax_pov_message($nid) {
  $result = db_query('SELECT field_pov_messages_value FROM {field_data_field_pov_messages} WHERE entity_id = :eid ORDER BY delta DESC', array(':eid' => $nid));

  foreach ($result as $r) {
    $messages[] = $r->field_pov_messages_value;
  }

  drupal_json_output($messages);
}

function myngl_event_participant_status($myngl_id, $user_id, $status){
  $result = db_query('SELECT id FROM {myngl_participant_status} WHERE
                        myngl_id = :myngl_id AND
                        user_id = :user_id LIMIT 1',
                        array(
                          ':myngl_id' => $myngl_id,
                          ':user_id' => $user_id,
                        )
                      );

  if ($result->rowCount()) {
    db_update('myngl_participant_status')->fields(
        array(
          'status' => $status,
          'timestamp' => time(),
        )
      )->condition('myngl_id', $myngl_id, '=')
      ->condition('user_id', $user_id, '=')
      ->execute();

  }
  else{
    db_insert('myngl_participant_status')->fields(
      array(
        'myngl_id'      => $myngl_id,
        'user_id'       => $user_id,
        'status'  => $status,
        'timestamp' => time(),
      )
    )->execute();
    }
}


function myngl_event_update_users_in_lounge($myngl_id){
  /* Consider 3 mintes as beingoffline */

  $result = db_query("SELECT user_id FROM {myngl_participant_status} WHERE
                     myngl_id = :myngl_id AND
                     status = 'Lounge' AND
                     timestamp > :inactive_time",
                     array(
                           ':myngl_id' => $myngl_id,
                           ':inactive_time' =>  time() - 180,
                           ));
  $data = array();
  $result2 = db_query("SELECT user_id FROM {myngl_participant_status} WHERE
                     myngl_id = :myngl_id AND
                     timestamp > :offline_time",
                     array(
                           ':myngl_id' => $myngl_id,
                           ':offline_time' =>  time() - 180,
                           ));

  $data[] = $result2->rowCount();
  foreach ($result as $r) {
    $data[] = $r->user_id;
  }
  //The first element of the array is the total count. rest of the elements are the user_ids in lounge.
  return drupal_json_output($data);
}

function myngl_event_lounge_redirect_to_theater($myngl_id){
  //print "<pre>";

  // Get the dates of the events, convert to timestamp and find the index of the nearst past start time.
  $result = db_query("SELECT field_myngl_dates_value FROM field_data_field_myngl_dates
                      WHERE entity_id = $myngl_id");

  foreach($result as $r){
    $dates[] = strtotime($r->field_myngl_dates_value) - ((date("I", time()))? 18000:18000); // Time is stored as UTC in the table,so it's always 5 hours.
  }


  $now = time() - ((date("I", time()))? 14400:18000); //adjust from UTC to edt/est
  rsort($dates);
  //$return_array['dates'] = $dates;
  $this_date_index = 0;
  while($this_date_index< count($dates)&& $dates[$this_date_index] > $now){
    $this_date_index++;
  }
  //$return_array['this_date_index'] = $this_date_index;

  //print $this_date_index . "<br/>";

  $field_theater_start_time = db_query("SELECT field_theater_start_time_value FROM
                                       field_data_field_theater_start_time WHERE
                                       entity_id = $myngl_id")->fetchField() * 60;

  //print $field_theater_start_time . "<br/>";

  //$return_array['now'] = $now;
  //$return_array['$field_theater_start_time'] = $field_theater_start_time;
  //$return_array['daylight_saving'] = date("I", time());
  //$return_array['this_date'] = $dates[$this_date_index];



  if ( $now - $dates[$this_date_index] > $field_theater_start_time){
    $return_array['redirect'] = 1;
    return drupal_json_output($return_array);
  }
  else{
    $return_array['redirect'] = 0;
    return drupal_json_output($return_array);
  }
}


function myngl_event_invitee_info_update($myngl_id){
  $myngl = node_load($myngl_id);
  $invitees = array();
  $invitees_ahh = array();

  foreach ($myngl->field_myngl_invitees['und'] as $x => $i) {
    $j = array_shift(entity_load('field_collection_item', array($i['value'])));

    $invitee['user_id'] = $j->field_invitee_user_account['und'][0]['uid'];
    $invitee['tagline'] = $j->field_myngl_tagline['und'][0]['value'];
    $invitee['pre_question_answers'] = unserialize($j->field_pre_question_answers['und'][0]['value']);
    /*
    $p = profile2_load_by_user($invitee['user_id'], 'profile');
    $invitee['city'] = $p->field_city['und'][0]['value'];*/
    $invitees[]= $invitee;
  }

  echo json_encode($invitees);
}

function myngl_event_theater_question_submit($myngl_id) {
	global $user;
	$node = node_load($myngl_id);
	$node->field_theater_questions['und'][]['value'] = $user->name.' : '.$_POST['question'];
	node_save($node);
	return;
}
